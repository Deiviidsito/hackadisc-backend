<?php

use App\Http\Controllers\AuthController;
use App\Http\Controllers\ImportController;
use App\Http\Controllers\VentasTotalesController;
use App\Http\Controllers\PagoInicioVentaController;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\TiempoEtapasController;
use App\Http\Controllers\TiempoFacturacionController;
use App\Http\Controllers\TiempoPagoController;
use App\Http\Controllers\TipoFlujoController;
use App\Http\Controllers\DebugController;

// ==================== RUTAS DE AUTENTICACI√ìN ====================
Route::post('login', [AuthController::class, 'login']);
Route::get('user', [AuthController::class, 'getUser']);
Route::post('logout', [AuthController::class, 'logout']);
Route::get('admin/users', [AuthController::class, 'getAllUsers']);

Route::post('importarUsuariosJson', [ImportController::class, 'importarUsuariosJson']);

Route::post('importarVentasJson', [ImportController::class, 'importarVentasJson']);

// Ruta para calcular desde base de datos
Route::post('/api/ventas/calcular-julio-2024', [VentasTotalesController::class, 'calcularVentasTotalesJulio2024']);

// Ruta para calcular desde archivo JSON
Route::post('/api/ventas/calcular-desde-json', [VentasTotalesController::class, 'calcularVentasTotalesDesdeJson']);

// ==================== RUTAS DE VENTAS TOTALES ====================

// POST /api/ventas/calcular-por-mes - C√ÅLCULO DE VENTAS TOTALES POR MES
// üßÆ CARACTER√çSTICAS:
// - Mismos filtros optimizados (ADI*, OTR*, SPD* excluidos)
// - Estados v√°lidos: {0,1,3}
// - Agrupaci√≥n por a√±o-mes con totales formateados
// - Par√°metros opcionales: a√±o, mes_inicio, mes_fin
Route::post('ventas/calcular-por-mes', [VentasTotalesController::class, 'calcularVentasTotalesPorMes']);

// GET /api/ventas/resumen-anual - RESUMEN EJECUTIVO POR A√ëO
// üìà CARACTER√çSTICAS:
// - Vista agregada con totales anuales
// - Identificaci√≥n del mejor mes por a√±o
// - Estad√≠sticas de actividad mensual
// - Promedios y m√©tricas de rendimiento
Route::get('ventas/resumen-anual', [VentasTotalesController::class, 'resumenVentasPorA√±o']);

// ==================== RUTAS DE AN√ÅLISIS DE PAGO ====================

// POST /api/pagos/analizar-tiempo-completo - AN√ÅLISIS DE TIEMPO DE PAGO
// ‚è±Ô∏è CARACTER√çSTICAS:
// - Calcula tiempo promedio desde FechaInicio hasta pago completo
// - Filtros por a√±o, rango de fechas (sin estado_venta - filtros internos autom√°ticos)
// - Estad√≠sticas: mediana, m√≠nimo, m√°ximo de d√≠as
// - Interpretaci√≥n del an√°lisis para mejor comprensi√≥n
Route::post('pagos/analizar-tiempo-completo', [PagoInicioVentaController::class, 'analizarTiempoPagoCompleto']);
// ==================== RUTAS DE AN√ÅLISIS TIEMPO ENTRE ETAPAS ====================

// POST /api/tiempo-etapas/promedio - AN√ÅLISIS TIEMPO PROMEDIO ENTRE ETAPAS
// ‚è±Ô∏è FUNCIONALIDADES:
// - Calcula tiempo desde estado 0 (En proceso) hasta estado 1 (Terminada)
// - Maneja casos complejos con m√∫ltiples transiciones de estado
// - Toma la √∫ltima fecha del estado 1 como referencia final
// - Filtros por a√±o, mes, y exclusi√≥n de prefijos (ADI, OTR, SPD)
// - Estad√≠sticas: promedio, mediana, min, max
// - Opci√≥n de incluir detalles individuales por venta
// Body: {"a√±o": 2024, "mes_inicio": 1, "mes_fin": 12, "incluir_detalles": false}
Route::post('tiempo-etapas/promedio', [TiempoEtapasController::class, 'calcularTiempoPromedioEtapas']);

// POST /api/tiempo-etapas/por-cliente - AN√ÅLISIS TIEMPOS AGRUPADO POR CLIENTE
// üë• CARACTER√çSTICAS:
// - Tiempo promedio de procesamiento por cliente
// - Estad√≠sticas individuales: min, max, total ventas
// - Ordenado por tiempo promedio descendente
// - Identifica clientes con procesos m√°s lentos/r√°pidos
// Body: {"a√±o": 2024, "mes_inicio": 1, "mes_fin": 12}
Route::post('tiempo-etapas/por-cliente', [TiempoEtapasController::class, 'analizarTiemposPorCliente']);

// POST /api/tiempo-etapas/distribucion - DISTRIBUCI√ìN DE TIEMPOS EN RANGOS
// üìä CARACTER√çSTICAS:
// - Agrupa tiempos en rangos predefinidos (0-7, 8-15, 16-30, etc.)
// - Porcentajes de distribuci√≥n
// - Identificaci√≥n de patrones de tiempo
// - √ötil para an√°lisis de eficiencia operacional
// Body: {"a√±o": 2024, "mes_inicio": 1, "mes_fin": 12}
Route::post('tiempo-etapas/distribucion', [TiempoEtapasController::class, 'obtenerDistribucionTiempos']);

// GET /api/tiempo-etapas/verificar-bd - VERIFICACI√ìN DE BASE DE DATOS (TESTING)
// üîç CARACTER√çSTICAS:
// - Verifica estructura y contenido de las tablas
// - Muestra estad√≠sticas b√°sicas y ejemplos de datos
// - √ötil para debugging y validaci√≥n
Route::get('tiempo-etapas/verificar-bd', [TiempoEtapasController::class, 'verificarBaseDatos']);

// ==================== RUTAS DE AN√ÅLISIS TIEMPO TERMINACI√ìN ‚Üí FACTURACI√ìN ====================

// POST /api/tiempo-facturacion/promedio - AN√ÅLISIS TIEMPO TERMINACI√ìN ‚Üí PRIMERA FACTURA
// üí∞ FUNCIONALIDADES:
// - Calcula tiempo desde estado 1 (Terminada) hasta primera factura emitida
// - Usa fecha m√°s reciente del estado 1 como punto de inicio
// - Identifica primera factura usando FechaFacturacion del JSON
// - Distingue entre facturas SENCE y facturas cliente
// - Filtros por a√±o, mes, tipo de factura
// - Estad√≠sticas completas: promedio, mediana, distribuci√≥n
// Body: {"a√±o": 2024, "mes": 10, "tipo_factura": "todas|sence|cliente"}
Route::post('tiempo-facturacion/promedio', [TiempoFacturacionController::class, 'calcularTiempoTerminacionFacturacion']);

// POST /api/tiempo-facturacion/por-cliente - AN√ÅLISIS FACTURACI√ìN POR CLIENTE
// üë• CARACTER√çSTICAS:
// - Tiempo promedio de facturaci√≥n por cliente
// - Estad√≠sticas por tipo de factura (SENCE vs Cliente)
// - Identificaci√≥n de clientes con facturaci√≥n m√°s lenta/r√°pida
// - Valor total de comercializaciones por cliente
// Body: {"a√±o": 2024, "mes": 10, "tipo_factura": "todas"}
Route::post('tiempo-facturacion/por-cliente', [TiempoFacturacionController::class, 'analizarTiemposPorCliente']);

// POST /api/tiempo-facturacion/distribucion - DISTRIBUCI√ìN TIEMPOS FACTURACI√ìN
// üìä CARACTER√çSTICAS:
// - Rangos espec√≠ficos para facturaci√≥n (mismo d√≠a, 1-3 d√≠as, etc.)
// - Porcentajes y ejemplos por rango
// - An√°lisis de eficiencia en proceso de facturaci√≥n
// - Identificaci√≥n de patrones y cuellos de botella
// Body: {"a√±o": 2024, "tipo_factura": "todas"}
Route::post('tiempo-facturacion/distribucion', [TiempoFacturacionController::class, 'obtenerDistribucionTiempos']);

// ==================== RUTAS DE AN√ÅLISIS TIEMPO FACTURACI√ìN ‚Üí PAGO ====================

// POST /api/tiempo-pago/promedio - AN√ÅLISIS TIEMPO FACTURACI√ìN ‚Üí PAGO EFECTIVO
// üíµ FUNCIONALIDADES:
// - Calcula tiempo desde emisi√≥n de factura hasta recepci√≥n de pago efectivo
// - Identifica √∫ltimo estado 3 (Pagado) con monto > 0 como fecha de pago
// - Distingue entre facturas SENCE y facturas cliente
// - Identifica facturas pendientes de pago y morosidad
// - An√°lisis de flujo de efectivo y tiempos de cobro
// Body: {"a√±o": 2024, "mes": 10, "tipo_factura": "todas", "incluir_pendientes": false}
Route::post('tiempo-pago/promedio', [TiempoPagoController::class, 'calcularTiempoFacturacionPago']);

// POST /api/tiempo-pago/morosidad - AN√ÅLISIS MOROSIDAD POR CLIENTE
// üö® CARACTER√çSTICAS:
// - Comportamiento de pago por cliente individual
// - Porcentaje de facturas pagadas vs pendientes
// - D√≠as promedio de retraso en pagos
// - Clasificaci√≥n de morosidad (excelente, bueno, regular, malo, cr√≠tico)
// - Montos totales pagados y pendientes por cliente
// Body: {"a√±o": 2024, "tipo_factura": "todas"}
Route::post('tiempo-pago/morosidad', [TiempoPagoController::class, 'analizarMorosidadPorCliente']);

// POST /api/tiempo-pago/distribucion - DISTRIBUCI√ìN TIEMPOS DE PAGO
// üìä CARACTER√çSTICAS:
// - Rangos espec√≠ficos para tiempos de pago (inmediato, 1-7 d√≠as, 8-15, etc.)
// - Identificaci√≥n facturas cr√≠ticas (>90 d√≠as sin pago)
// - An√°lisis de eficiencia en cobros
// - Patrones de comportamiento de pago por tipo de factura
// Body: {"a√±o": 2024, "tipo_factura": "todas"}
Route::post('tiempo-pago/distribucion', [TiempoPagoController::class, 'obtenerDistribucionTiemposPago']);

// ==================== RUTAS DE AN√ÅLISIS TIPOS DE FLUJO COMERCIALIZACI√ìN ====================

// POST /api/tipo-flujo/analizar - AN√ÅLISIS COMPARATIVO TIPOS DE FLUJO
// üîÑ FUNCIONALIDADES:
// - Detecta autom√°ticamente tipo de flujo: Completo (0‚Üí3‚Üí1) vs Simple (0‚Üí1)
// - Compara tiempos promedio entre flujos con/sin financiamiento SENCE
// - Analiza valores promedio y n√∫mero de facturas por tipo
// - Identifica preferencias de clientes por tipo de financiamiento
// - M√©tricas de eficiencia y adopci√≥n de cada flujo
// Body: {"a√±o": 2024, "mes": 10}
Route::post('tipo-flujo/analizar', [TipoFlujoController::class, 'analizarTiposFlujo']);

// POST /api/tipo-flujo/preferencias - AN√ÅLISIS PREFERENCIAS CLIENTES POR FLUJO
// üë• CARACTER√çSTICAS:
// - Comportamiento individual de cada cliente por tipo de flujo
// - Clasificaci√≥n de preferencias: fuerte/leve hacia cada flujo o mixto
// - Valores promedio por cliente seg√∫n tipo de flujo elegido
// - Identificaci√≥n clientes que solo usan un tipo vs mixtos
// - Estad√≠sticas de adopci√≥n de financiamiento SENCE por cliente
// Body: {"a√±o": 2024, "mes": 10}
Route::post('tipo-flujo/preferencias', [TipoFlujoController::class, 'analizarPreferenciasClientes']);

// POST /api/tipo-flujo/eficiencia - AN√ÅLISIS EFICIENCIA POR TIPO DE FLUJO
// ‚ö° CARACTER√çSTICAS:
// - Comparativa eficiencia operacional entre flujos
// - Tiempos desarrollo, facturaci√≥n y pago por tipo
// - Tasas de pago y morosidad comparativas
// - Recomendaciones basadas en eficiencia
// - Impacto del financiamiento SENCE en el proceso
// Body: {"a√±o": 2024, "mes": 10}
Route::post('tipo-flujo/eficiencia', [TipoFlujoController::class, 'analizarEficienciaPorFlujo']);

// ==================== RUTAS DE DEBUG ====================
Route::get('debug/test-basico', [DebugController::class, 'testBasico']);
Route::get('debug/test-tablas', [DebugController::class, 'testTablas']);
Route::get('debug/test-join', [DebugController::class, 'testJoin']);
Route::get('debug/analizar-estructura', [DebugController::class, 'analizarEstructuraCompleta']);
